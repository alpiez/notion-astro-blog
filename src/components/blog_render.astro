---
import Paragraph from "./notion_blocks/paragraph.astro";
import Heading1 from "./notion_blocks/heading_1.astro";
import Heading2 from "./notion_blocks/heading_2.astro";
import Heading3 from "./notion_blocks/heading_3.astro";
import BulletedList from "./notion_blocks/bulleted_list.astro";
import NumberedList from "./notion_blocks/numbered_list.astro";
import type { NotionBlock } from "../lib/types";
import Toggle from "./notion_blocks/toggle.astro";
import Quote from "./notion_blocks/quote.astro";
import Callout from "./notion_blocks/callout.astro";
import Code from "./notion_blocks/code.astro";

interface Props {
  blocks: Array<NotionBlock>;
}

const { blocks } = Astro.props;
let groupedBlock: NotionBlock[] = [];
---

<>
  {
    blocks.map((block, index) => {
      if (block != undefined) {
        // Pick suitable component based on its notion block type
        switch (block.type) {
          case "paragraph":
            return <Paragraph block={block} />;
          case "heading_1":
            return <Heading1 block={block} />;
          case "heading_2":
            return <Heading2 block={block} />;
          case "heading_3":
            return <Heading3 block={block} />;
          case "bulleted_list_item":
            groupedBlock.push(block);
            if (
              blocks.length - 1 == index ||
              blocks[++index].type != block.type
            ) {
              let tempArray = groupedBlock;
              groupedBlock = [];
              return <BulletedList blocks={tempArray} />;
            }
            break;
          case "numbered_list_item":
            groupedBlock.push(block);
            if (
              blocks.length - 1 == index ||
              blocks[++index].type != block.type
            ) {
              let tempArray = groupedBlock;
              groupedBlock = [];
              return <NumberedList blocks={tempArray} />;
            }
            break;
          case "toggle":
            return <Toggle block={block} index={index} />;
          case "quote":
            return <Quote block={block} />;
          case "callout":
            return <Callout block={block} />;
          case "code":
            return <Code block={block} />;
          default:
            "";
        }
      }
    })
  }
  <script is:inline>
    function toggle(ele) {
      if (ele.lastElementChild.style.display === "none") {
        ele.lastElementChild.style.display = "block";
        ele.firstElementChild.style.transform = "rotate(90deg)";
      } else {
        ele.lastElementChild.style.display = "none";
        ele.firstElementChild.style.transform = "rotate(0deg)";
      }
    }
  </script>
</>
