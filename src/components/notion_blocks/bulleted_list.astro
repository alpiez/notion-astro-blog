---
import {
  Content,
  isBlocksGroup,
  isNotBlocksGroup,
} from "../../lib/search_slug";

interface Props {
  blocksGroup: Content;
}

let { blocksGroup } = Astro.props;
let contents: Content[] = [];
let text = "";
let level = 0;
let rawHtmlString = "";
let endingTagCount = 0;

if (
  isBlocksGroup(blocksGroup.result) &&
  blocksGroup.result.type === "bulleted_list_item"
) {
  contents = blocksGroup.result.contents;
}

for (const content of contents) {
  text = "";

  if (
    isNotBlocksGroup(content.result) &&
    content.result.type === "bulleted_list_item" &&
    content.result.bulleted_list_item.rich_text[0]?.type === "text"
  ) {
    text = content.result.bulleted_list_item.rich_text[0].text.content;

    //When childrenLevel is consistent, no need to add <ul> tag.
    if (content.childrenLevel == level) {
      rawHtmlString += `<li>${text}</li>`;
    }
    // If childrenLevel increase, add the <ul> tag and increment
    // `endingTagCount` to add closing </ul> tag. We don't close tag yet since
    //  we add another block in this inner html.
    else if (content.childrenLevel > level) {
      level = content.childrenLevel;
      endingTagCount++;
      rawHtmlString += `
      <ul
        role="list"
        class="list-[revert] list-inside text-xl ml-10"
      >
        <li>${text}</li>`;
    }
    // If the childrenLevel decreases, immediately close </ul> tag and
    // decrement `endingTagCount` to prevent extra tag.
    else {
      level = content.childrenLevel;
      endingTagCount--;
      rawHtmlString += "</ul>";
    }
  }
}
rawHtmlString += "</ul>".repeat(endingTagCount);
---

<ul
  role="list"
  class="list-[revert] list-inside text-xl mb-4"
  set:html={rawHtmlString}
/>
